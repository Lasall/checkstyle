#!/usr/bin/perl -w
use strict;
use warnings;

use Term::ANSIColor;

my @comment_line_match = ("//");
my @comment_block_match = (["/*","*/"]);
my @matchexpressions = (
    ['[^, \t]([ \t]+)\(\)', "space before empty brackets", 1],
    ['\){', "no space between method bracket and next block bracket", 0],
    ['[\t]+', "usage of tab", 0],
    ['[ \t]+$', "space character at end of line", 0],
    ['\)=>|=>{', "no space arround lambda method", 0],
    ['[^ "]([ ]{2,})', "multiple spaces", 1],
);

my $file_cnt = 0;
my $line_cnt_glob = 0;
my $comment_cnt_glob = 0;
my $valid_cnt_glob = 0;
my $err_cnt_glob = 0;


foreach my $filename (@ARGV) {
    next unless (-f $filename);
    ++$file_cnt;
    my $line_cnt = 0;
    my $comment_cnt = 0;
    my $valid_cnt = 0;
    my $err_cnt = 0;
    my $init = 0;

    my $blockcomment = 0;

    open(FILE, "<", $filename) or die $!;
    while (<FILE>) {
        my $line = $_;
        my $comment = 0;
        my $errline = undef;
        ++$line_cnt;
        ++$line_cnt_glob;

        # Check for comment.
        if ($blockcomment) {
            foreach my $i (0..$#comment_block_match) {
                if ($line =~ /\Q$comment_block_match[$i][1]\E/) {
                    $blockcomment = 0;
                }
            }
            next unless $blockcomment;
        } else {
            foreach my $i (0..$#comment_block_match) {
                if ($line =~ /(?:\\\")?[^"]*\Q$comment_block_match[$i][0]\E/) {
                    $blockcomment = 1;
                }
            }
        }
        foreach (@comment_line_match) {
            if ($line =~ /(?:\\\")?[^"]*\Q$_\E/) {
                $comment = 1;
                last;
            } else {
                $comment = 0;
            }
        }

        if ($comment || $blockcomment) {
            ++$comment_cnt;
            ++$comment_cnt_glob;
            next;
        }

        # Check syntax.
        my ($begin, $end);
        foreach my $i (0..$#matchexpressions) {
            if ($line =~ /$matchexpressions[$i][0]/) {
                $errline = $matchexpressions[$i][1];
                $begin = $-[$matchexpressions[$i][2]];
                $end = $+[$matchexpressions[$i][2]];
                last;
            }
        }
        unless (defined $errline) {
            ++$valid_cnt;
            ++$valid_cnt_glob;
            next;
        }

        my $arrow = colored("<----", 'bright_red');
        $errline = colored($errline, 'red');
        chomp $line;
        $line = substr($line,0,$begin) .
                colored(substr($line,$begin,$end-$begin), 'on_red') .
                substr($line,$end,);

        ++$err_cnt;
        ++$err_cnt_glob;

        unless ($init) {
            print "\n";
            print color 'bright_blue';
            print "File: $filename\n";
            print color 'reset';
            $init = 1;
        }

        print "$filename : ($line_cnt:$begin-$end): $line   $arrow $errline\n";
    }
    close(FILE);
}


format TABLE =

------------------------------------------------------------------------------
  Total files checked:   @>>>>>>
$file_cnt
  Total lines checked:   @>>>>>>
$line_cnt_glob
  Comment lines skipped: @>>>>>>
$comment_cnt_glob
  Valid lines skipped:   @>>>>>>
$valid_cnt_glob
  Errors found:          @>>>>>>
$err_cnt_glob
.
format_name STDOUT "TABLE";
write STDOUT;

my $test = "123456";
print substr($test, 6,)."\n";
